chapter \<open>Generated by Lem from \<open>bool.lem\<close>.\<close>

theory "Lem_bool" 

imports
  Main

begin 

 

\<comment> \<open>\<open> The type bool is hard-coded, so are true and false \<close>\<close>

\<comment> \<open>\<open> ----------------------- \<close>\<close>
\<comment> \<open>\<open> not                     \<close>\<close>
\<comment> \<open>\<open> ----------------------- \<close>\<close>

\<comment> \<open>\<open>val not : bool -> bool\<close>\<close>
\<comment> \<open>\<open>let not b=  match b with
  | true -> false
  | false -> true
end\<close>\<close>

\<comment> \<open>\<open> ----------------------- \<close>\<close>
\<comment> \<open>\<open> and                     \<close>\<close>
\<comment> \<open>\<open> ----------------------- \<close>\<close>

\<comment> \<open>\<open>val && [and] : bool -> bool -> bool\<close>\<close>
\<comment> \<open>\<open>let && b1 b2=  match (b1, b2) with
  | (true, true) -> true
  | _ -> false
end\<close>\<close>


\<comment> \<open>\<open> ----------------------- \<close>\<close>
\<comment> \<open>\<open> or                      \<close>\<close>
\<comment> \<open>\<open> ----------------------- \<close>\<close>

\<comment> \<open>\<open>val || [or] : bool -> bool -> bool\<close>\<close>
\<comment> \<open>\<open>let || b1 b2=  match (b1, b2) with
  | (false, false) -> false
  | _ -> true
end\<close>\<close>


\<comment> \<open>\<open> ----------------------- \<close>\<close>
\<comment> \<open>\<open> implication             \<close>\<close>
\<comment> \<open>\<open> ----------------------- \<close>\<close>

\<comment> \<open>\<open>val --> [imp] : bool -> bool -> bool\<close>\<close>
\<comment> \<open>\<open>let --> b1 b2=  match (b1, b2) with
  | (true, false) -> false
  | _ -> true
end\<close>\<close>


\<comment> \<open>\<open> ----------------------- \<close>\<close>
\<comment> \<open>\<open> equivalence             \<close>\<close>
\<comment> \<open>\<open> ----------------------- \<close>\<close>

\<comment> \<open>\<open>val <-> [equiv] : bool -> bool -> bool\<close>\<close>
\<comment> \<open>\<open>let <-> b1 b2=  match (b1, b2) with
  | (true, true) -> true
  | (false, false) -> true
  | _ -> false
end\<close>\<close>


\<comment> \<open>\<open> ----------------------- \<close>\<close>
\<comment> \<open>\<open> xor                     \<close>\<close>
\<comment> \<open>\<open> ----------------------- \<close>\<close>

\<comment> \<open>\<open>val xor : bool -> bool -> bool\<close>\<close>

end
