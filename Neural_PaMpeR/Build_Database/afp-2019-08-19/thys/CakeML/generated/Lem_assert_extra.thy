chapter \<open>Generated by Lem from \<open>assert_extra.lem\<close>.\<close>

theory "Lem_assert_extra" 

imports
  Main
  "Lem"

begin 


\<comment> \<open>\<open>open import {ocaml} `Xstring`\<close>\<close>
\<comment> \<open>\<open>open import {hol} `stringTheory` `lemTheory`\<close>\<close>
\<comment> \<open>\<open>open import {coq} `Coq.Strings.Ascii` `Coq.Strings.String`\<close>\<close>
\<comment> \<open>\<open>open import {isabelle} `$LIB_DIR/Lem`\<close>\<close>

\<comment> \<open>\<open> ------------------------------------ \<close>\<close>
\<comment> \<open>\<open> failing with a proper error message  \<close>\<close>
\<comment> \<open>\<open> ------------------------------------ \<close>\<close>

\<comment> \<open>\<open>val failwith: forall 'a. string -> 'a\<close>\<close>

\<comment> \<open>\<open> ------------------------------------ \<close>\<close>
\<comment> \<open>\<open> failing without an error message     \<close>\<close>
\<comment> \<open>\<open> ------------------------------------ \<close>\<close>

\<comment> \<open>\<open>val fail : forall 'a. 'a\<close>\<close>
definition fail  :: " 'a "  where 
     " fail = ( failwith (''fail''))"


\<comment> \<open>\<open> ------------------------------------- \<close>\<close>
\<comment> \<open>\<open> assertions                            \<close>\<close>
\<comment> \<open>\<open> ------------------------------------- \<close>\<close>

\<comment> \<open>\<open>val ensure : bool -> string -> unit\<close>\<close>
definition ensure  :: " bool \<Rightarrow> string \<Rightarrow> unit "  where 
     " ensure test msg = (
  if test then
    () 
  else
    failwith msg )"


end
